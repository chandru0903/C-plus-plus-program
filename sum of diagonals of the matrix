#include <iostream>

int main() {
    const int rows = 3;
    const int cols = 3;

    int matrixA[rows][cols];
    int matrixB[rows][cols];
    int result[rows][cols];

    // Input for Matrix A
    std::cout << "Enter elements for Matrix A:" << std::endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << "Enter element at position (" << i + 1 << ", " << j + 1 << "): ";
            std::cin >> matrixA[i][j];
        }
    }

    // Input for Matrix B
    std::cout << "Enter elements for Matrix B:" << std::endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << "Enter element at position (" << i + 1 << ", " << j + 1 << "): ";
            std::cin >> matrixB[i][j];
        }
    }

    // Add matrices directly
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }

    // Display matrices
    std::cout << "Matrix A:" << std::endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << matrixA[i][j] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << "Matrix B:" << std::endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << matrixB[i][j] << " ";
        }
        std::cout << std::endl;
    }

    std::cout << "Resultant Matrix:" << std::endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << result[i][j] << " ";
        }
        std::cout << std::endl;
    }

    // Calculate and display the sum of diagonals
    int sumDiagonal1 = 0;
    int sumDiagonal2 = 0;
    for (int i = 0; i < rows; ++i) {
        sumDiagonal1 += result[i][i];          // Main diagonal
        sumDiagonal2 += result[i][cols - i - 1]; // Secondary diagonal
    }

    std::cout << "Sum of the main diagonal: " << sumDiagonal1 << std::endl;
    std::cout << "Sum of the secondary diagonal: " << sumDiagonal2 << std::endl;

    return 0;
}
